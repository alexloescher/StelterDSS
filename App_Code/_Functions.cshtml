@using Ingeniux.Runtime
@using System.Web.Mvc
@using System.Text.RegularExpressions
@using System.Configuration;
@functions 
{
    public static bool isMobile(ICMSPage page)
    {
        return page != null && page.MobileDeviceInformation != null && !page.MobileDeviceInformation.IsTablet;
    }

    public static string GetLinkActionNew(ICMSLinkElement link, UrlHelper url)
    {
        String linkUrl = "";
        if (link != null)
        {
            linkUrl = (!String.IsNullOrWhiteSpace(link.GetAttributeValue("CustomURL"))) ? link.GetAttributeValue("CustomURL") : link.URL;

            if (UseUrlRewrites() && !link.Page.IsPreview)
            {
                var siteControl = link.Page.Element("CSiteControl");
                if (siteControl != null)
                {
                    ICMSElement homeLink = siteControl.Element("Page", "HomeLink");
                    if (homeLink != null && !homeLink.GetAttributeValue("URL").IsNullOrEmpty())
                    {
                        if (linkUrl.Equals(homeLink.GetAttributeValue("URL")))
                        {
                            linkUrl = "/";
                            return linkUrl;
                        }
                    }
                }

                if (!linkUrl.StartsWith("http") && linkUrl.Contains(@"/"))
                {
                    linkUrl = linkUrl.SubstringAfter(@"/");
                }
                else
                {
                    try
                    {
                        linkUrl = (linkUrl.StartsWith("http")) ? linkUrl : url.Content("~/" + linkUrl);
                    }
                    catch (Exception e)
                    {
                        //This broke once on the runtime when a user had "www.google.com" instead of "http://www.google.com" as a test link
                    }
                }
            }
        }
        //remove tfrm=4 for page preview
        return linkUrl.Replace("&tfrm=4", "");
    }

    public static string GetLinkURL(ICMSElement elem, UrlHelper url, String urlOverride = "")
    {
        String linkUrl = "";
        if (elem != null)
        {
            linkUrl = !String.IsNullOrWhiteSpace(urlOverride) ? urlOverride : elem.GetAttributeValue("URL");
            if (UseUrlRewrites() && !elem.Page.IsPreview)
            {
                var siteControl = elem.Page.Element("CSiteControl");
                if (siteControl != null)
                {
                    ICMSElement homeLink = siteControl.Element("Page", "HomeLink");
                    if (homeLink != null && !homeLink.GetAttributeValue("URL").IsNullOrEmpty())
                    {
                        if (linkUrl.Equals(homeLink.GetAttributeValue("URL")))
                        {
                            linkUrl = "/";
                            return linkUrl;
                        }
                    }
                }

                if (!linkUrl.StartsWith("http") && !linkUrl.StartsWith("Documents") && linkUrl.Contains(@"/"))
                {
                    linkUrl = linkUrl.SubstringAfter(@"/");
                }
                else
                {
                    try
                    {
                        linkUrl = (linkUrl.StartsWith("http") || linkUrl.StartsWith("Documents") || linkUrl.StartsWith("<#")) ? linkUrl : url.Content("~/" + linkUrl);
                    }
                    catch (Exception e)
                    {
                        //This broke once on the runtime when a user had "www.google.com" instead of "http://www.google.com" as a test link
                    }
                }
            }
        }

        //remove tfrm=4 for page preview
        return linkUrl.Replace("&tfrm=4", "");
    }

    public static String MicroSiteStringWithVariableSubstitution(String inCopy, ICMSPage page)
    {
        String retStr = inCopy;
        ICMSElement siteControl = page.Element("MicroSiteControl");
        if (siteControl != null)
        {
            // Custom Variables
            foreach (var customVar in siteControl.Elements("Variable"))
            {
                if (!customVar.Value.IsNullOrEmpty())
                {
                    string[] keyValuePair = customVar.Value.Split(',');
                    string key = "@[" + keyValuePair[0].Trim() + "]";
                    string value = keyValuePair[1].Trim();

                    retStr = retStr.Replace(key, value);
                }
            }
        }
        return retStr;
    }

    public static Boolean isMobile()
    {
        string u = Request.ServerVariables["HTTP_USER_AGENT"];
        Regex b = new Regex(@"(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino", RegexOptions.IgnoreCase | RegexOptions.Multiline);
        Regex v = new Regex(@"1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-", RegexOptions.IgnoreCase | RegexOptions.Multiline);
        return (b.IsMatch(u) || v.IsMatch(u.Substring(0, 4)));
    }

    public static String StringWithVariableSubstitution(String inCopy, ICMSPage page)
    {
        String retStr = inCopy;
        ICMSElement siteControl = page.Element("CSiteControl");
        if (siteControl != null)
        {
            // Pre-Defined Variables
            //
            // @[OrgName]
            retStr = retStr.Replace("@[OrgName]", siteControl.GetElementValue("OrgName"));
            retStr = retStr.Replace("@[OrgID]", siteControl.GetElementValue("OrgID"));

            var contact = siteControl.Element("ContactComponent", "ContactUsComponent");
            if (contact != null)
            {
                var contactName = contact.GetElementValue("ContactName");
                var contactPhone = contact.GetElementValue("Phone");
                var contactEmail = contact.GetElementValue("Email");
                /*
                var contactEmail = "<a href=\"mailto:" +
                    contact.GetElementValue("Email") +
                    "\">" +
                    contact.GetElementValue("Email") +
                    "</a>";
                */
                retStr = retStr.Replace("@[Contact]", @contactName.ToString());
                retStr = retStr.Replace("@[Phone]", @contactPhone.ToString());
                retStr = retStr.Replace("@[Email]", @contactEmail.ToString());
            }

            var legal = siteControl.Element("LegalComponent", "LegalComponent");
            if (legal != null)
            {
                var legalName = legal.GetElementValue("LegalName");
                var legalAddr = legal.GetElementValue("LegalAddress");
                var fedTaxId = legal.GetElementValue("FederalTaxIDNumber");

                retStr = retStr.Replace("@[LegalName]", @legalName.ToString());
                retStr = retStr.Replace("@[LegalAddress]", @legalAddr.ToString());
                retStr = retStr.Replace("@[FedTaxIdNumber]", @fedTaxId.ToString());
            }
            var rates = siteControl.Element(null, "BrochureRatesComponent");
            if (rates != null)
            {
                retStr = retStr.Replace("@[BrochureRatesTable]", rates.GetElementValue("FreeFormContent"));
            }

            // Custom Variables
            foreach (var customVar in siteControl.Elements("Variable"))
            {
                if (!customVar.Value.IsNullOrEmpty())
                {
                    string[] keyValuePair = customVar.Value.Split(',');
                    string key = "@[" + keyValuePair[0].Trim() + "]";
                    //string value = keyValuePair[1].Trim();
                    string value = customVar.Value.SubstringAfter(",");

                    retStr = retStr.Replace(key, value);
                }
            }

            // Embedded URLs
            if (!siteControl.Page.IsPreview && UseUrlRewrites())
            {
                ICMSElement homeUrl = siteControl.Element("Page", "HomeLink");
                if (homeUrl != null && !homeUrl.GetAttributeValue("Link").IsNullOrEmpty())
                {
                    var siteName = "/" + homeUrl.GetAttributeValue("Link").ToLower() + "/";
                    retStr = retStr.Replace(siteName, "/");
                }
            }
        }

        return retStr;
    }

    public static Boolean CheckCategories(String pageCats, String testCats)
    {
        pageCats = "|" + pageCats + "|";
        String[] testCatIds = testCats.Split(new char[] { '|' }).Where(elt => !String.IsNullOrWhiteSpace(elt)).ToArray();
        String[] pageCatIds = pageCats.Split(new char[] { '|' }).Where(elt => !String.IsNullOrWhiteSpace(elt)).ToArray();
        return testCatIds.Intersect(pageCatIds).Any();
    }

    public static Boolean CheckCurrentEvent(String startDateStr, String endDateStr = "")
    {
        bool isValid = false;
        DateTime? start = GetDate(startDateStr);
        DateTime? end = GetDate(endDateStr);
        if (start.HasValue)
        {
            if (end.HasValue)
            {
                //if there's a start and end date, then anytime between them is valid.
                isValid = (start.Value <= DateTime.Today) && (DateTime.Today <= end.Value);
            }
            else
            {
                //one day event; it's only current if today is the day
                isValid = start.Value.CompareTo(DateTime.Today) == 0;
            }
        }
        return isValid;
    }

    public static Boolean CheckDates(String dateStr, int year, int month = 0, int day = 0)
    {
        bool isValid = false;
        if (!String.IsNullOrWhiteSpace(dateStr))
        {
            DateTime? date = GetDate(dateStr);
            if (date != null && date.HasValue)
            {
                isValid = date.Value.Year == year;
                isValid = isValid && (month == 0 || date.Value.Month == month);
                isValid = isValid && (day == 0 || date.Value.Day == day);
            }
        }
        return isValid;
    }

    public static Boolean CheckDateWithinNDays(String dateStr, int days)
    {
        bool isValid = false;
        DateTime? date = GetDate(dateStr);
        if (date.HasValue)
        {
            TimeSpan offset = DateTime.Today.Subtract(date.Value);
            isValid = -1 * days <= offset.Days && offset.Days <= days;
        }
        return isValid;
    }

    public static Boolean CheckDateWithinRange(String eventStartDateStr, String eventEndDateStr, DateTime viewStart, DateTime viewEnd)
    {
        bool isValid = false;
        DateTime? eventStart = GetDate(eventStartDateStr);
        DateTime? eventEnd = GetDate(eventEndDateStr);
        if (eventStart.HasValue)
        {
            // valid if start date is in the view range
            isValid = (viewStart <= eventStart.Value && eventStart.Value <= viewEnd);
            //if not valid and there is an end date, keep checking		
            if (!isValid && eventEnd.HasValue)
            {
                //valid if the end date is in the view range
                isValid = (viewStart <= eventEnd.Value && eventEnd.Value <= viewEnd);

                //or if the start date is before view start & end date is after view end			
                isValid = isValid || (eventStart.Value <= viewStart && viewEnd <= eventEnd);
            }
        }
        return isValid;
    }

    public static Boolean CheckUpcoming(String dateStr, String endDateStr = "")
    {
        bool isValid = false;
        if (!String.IsNullOrWhiteSpace(dateStr))
        {
            DateTime? date = GetDate(dateStr);
            if (date != null && date.HasValue)
            {
                isValid = date.Value >= DateTime.Today;
            }
        }
        if (!String.IsNullOrWhiteSpace(endDateStr))
        {
            isValid = isValid || CheckUpcoming(endDateStr);
        }
        return isValid;
    }

    public static String Ellipsis(String initialValue, int numCharacters)
    {
        if (initialValue != null && initialValue.Length > numCharacters)
        {
            string descWithoutTags = Regex.Replace(initialValue, "<[^>]+>", " ");
            string descWithoutMultipleSpaces = Regex.Replace(descWithoutTags, @"\s+", " ");

            // if it's shorter than the requested length once special characters are removed, return the original.
            if (descWithoutMultipleSpaces.Length < numCharacters)
                return initialValue;

            int iNextSpace = descWithoutMultipleSpaces.LastIndexOf(" ", numCharacters);
            return string.Format("{0}...", descWithoutMultipleSpaces.Substring(0, (iNextSpace > 0) ? iNextSpace : numCharacters).Trim());
        }
        return initialValue;
    }

    public static ICMSElement GetBannerComponent(CMSPageRequest page)
    {
        ICMSElement siteControl = page.Element("CSiteControl");
        ICMSElement banner = page.Element(null, "Banner");
        //interior pages have a site control banner override
        if (banner == null && siteControl != null && (page.RootElementName.Contains("Interior") || page.RootElementName.Contains("Article") || page.RootElementName.Contains("ContactUs")))
        {
            //make sure that it isn't excluded
            IEnumerable<ICMSLinkElement> excludedPages = siteControl.GetNavigationItems("NoBannerPages", NavigationElementType.LinkSet);
            if (!excludedPages.Any(item => item.ID == page.ID))
            {
                banner = siteControl.Element(null, "Banner");
            }
        }
        return banner;
    }

    public static List<ICMSNavigatingCategory> GetChildCategories(ICMSPage page, String taxonomyName, Boolean recursive = false)
    {
        var list = new List<ICMSNavigatingCategory>();
        if (page != null)
        {
            var taxNav = page.GetTaxonomyNavigation(taxonomyName, recursive);
            if (taxNav != null)
            {
                var parentcats = taxNav.NavigatingCategories;
                if (parentcats != null && parentcats.Any())
                {
                    foreach (var parent in parentcats)
                    {
                        list.AddRange(parent.Children);
                    }
                }
            }
        }
        return list;
    }

    public static String GetClassAttrString(String className, bool condition = true)
    {
        String retStr = "";
        if (!String.IsNullOrWhiteSpace(className) && condition)
        {
            retStr = String.Format("class=\"{0}\"", className);
        }
        return retStr;
    }

    public static DateTime? GetDate(String dateStr)
    {
        DateTime? returnVal = null;
        if (!String.IsNullOrWhiteSpace(dateStr))
        {
            returnVal = dateStr.ToLocalDate();
        }
        return returnVal;
    }

    public static void GetGridSettings(String gridLayout, out String leftColBootstrapClass, out String middleColBootstrapClass, out String rightColBootstrapClass)
    {
        leftColBootstrapClass = "col-md-3 col-md-pull-9 col-lg-3 col-lg-pull-9";
        middleColBootstrapClass = "col-md-9 col-md-push-3 col-lg-9 col-lg-push-3";
        rightColBootstrapClass = "";

        string[] intGridVal = gridLayout.Split('-');
        if (intGridVal[0] != "")
        {
            var left = "";
            var middle = "";
            var right = "";
            if (intGridVal.Length == 1)
            {
                middle = intGridVal[0];
            }
            if (intGridVal.Length == 2)
            {
                left = intGridVal[0];
                middle = intGridVal[1];
            }
            if (intGridVal.Length == 3)
            {
                left = intGridVal[0];
                middle = intGridVal[1];
                right = intGridVal[2];
            }
            if (right == "")
            {
                //if right column is empty
                if (left == "")
                {
                    //if right and left are empty
                    middleColBootstrapClass = "col-md-12 col-lg-12";
                    leftColBootstrapClass = "";
                }
                else
                {
                    if (Int32.Parse(left) > Int32.Parse(middle))
                    {
                        //if right is empty and left is greater than middle
                        rightColBootstrapClass = "col-md-" + middle + " col-lg-" + middle;
                        middleColBootstrapClass = "col-md-" + left + " col-lg-" + left;
                        leftColBootstrapClass = "";
                    }
                    else
                    {
                        //if right is empty and left is lesser than middle
                        leftColBootstrapClass = "col-md-" + left + " col-md-pull-" + middle + " col-lg-" + left + " col-lg-pull-" + middle;
                        middleColBootstrapClass = "col-md-" + middle + " col-md-push-" + left + " col-lg-" + middle + " col-lg-push-" + left;
                    }
                }
            }
            else
            {
                //right column is not empty
                leftColBootstrapClass = "col-md-" + left + " col-md-pull-" + middle + " col-lg-" + left + " col-lg-pull-" + middle;
                middleColBootstrapClass = "col-md-" + middle + " col-md-push-" + left + " col-lg-" + middle + " col-lg-push-" + left;
                rightColBootstrapClass = "col-md-" + right + " col-lg-" + right;
            }
        }
    }

    public static string GetImagePath(String imgPath, UrlHelper url, ICMSPage model)
    {
        String path = "/images/" + imgPath;
        if (model != null && model.IsPreview)
        {
            path = url.Asset("images/" + imgPath, model);
        }
        return path;
    }

    public static string GetLinkAction(ICMSLinkElement link, UrlHelper url)
    {
        String linkUrl = "";
        if (link != null)
        {
            linkUrl = (!String.IsNullOrWhiteSpace(link.GetAttributeValue("CustomURL"))) ? link.GetAttributeValue("CustomURL") : link.URL;
            linkUrl = (linkUrl.StartsWith("http")) ? linkUrl : url.Content("~/" + linkUrl);
        }
        //remove tfrm=4 for page preview
        return linkUrl.Replace("&tfrm=4", "");
    }

    public static ICMSLinkElement GetLinkFromSiteControl(CMSPageRequest pageObj, String linkName)
    {
        ICMSLinkElement link = null;
        ICMSElement sectionControl = pageObj.Element("SectionControl");
        ICMSElement siteControl = (sectionControl != null) ? sectionControl.Element("SiteControlCommon") : null;
        if (siteControl != null)
        {
            link = siteControl.GetLinkItem(linkName, false);
        }
        return link;
    }

    public static String GetPageHeader(CMSPageRequest page)
    {
        String retVal = page.GetElementValue("Title");
        if (String.IsNullOrWhiteSpace(retVal))
        {
            ICMSElement siteControl = page.Element("CSiteControl");
            retVal = siteControl != null ? siteControl.GetElementValue("PageHeader") : retVal;
        }
        return retVal;
    }

    public static string GetPrebuiltPath(String prebuiltPath, UrlHelper url, ICMSPage model)
    {
        String path = "/" + prebuiltPath;
        if (model != null && model.IsPreview)
        {
            path = url.Asset(prebuiltPath, model);
        }
        return path;
    }

    public static String GetTime(String time)
    {
        String returnVal = "";
        if (time != "undefined" && !String.IsNullOrWhiteSpace(time))
        {
            try
            {
                String[] sections = time.Split(new char[] { ':' });
                int hours = int.Parse(sections[0]);
                int minutes = int.Parse(sections[1]);
                String ampm = (hours > 12) ? "pm" : "am";
                if (hours == 12 && minutes == 0)
                    ampm = "noon";
                if (hours == 0 && minutes == 0)
                    ampm = "midnight";

                hours = (hours + 11) % 12 + 1;
                returnVal = hours + ":" + sections[1] + " " + ampm;
            }
            catch (Exception e) { }
        }
        return returnVal;
    }

    public static int IntegerOrDefault(String test, int defaultVal)
    {
        int returnVal = defaultVal;
        if (!String.IsNullOrWhiteSpace(test)) { int.TryParse(test, out returnVal); } //check if a year was passed in
        return returnVal;
    }

    public static String ThisPageUrl(ICMSPage page)
    {
        String pageUrl = "";
        var ancestors = page.GetNavigationItems("AncestorNavigation", NavigationElementType.Navigation, false, false);
        if (ancestors != null && ancestors.Any())
        {
            pageUrl = ancestors.LastOrDefault().URL;
        }
        return pageUrl;
    }

    public static String WrapPTag(string value)
    {
        return (value.IndexOf("</p>") == -1) ? "<p>" + value + "</p>" : value;
    }

    public static bool UseUrlRewrites()
    {
        return ConfigurationManager.AppSettings["useUrlRewrites"] == "true";
    }

    static Dictionary<string, string> formKeyDict = new Dictionary<string, string>() {
        { "fname", "First Name" },
        { "lname", "Last Name" },
        { "name", "Name" },
        { "email", "Email Address" }
    };

    public static String LookupKeyName(string key)
    {
        string readableKey = key;
        if (formKeyDict != null && formKeyDict.ContainsKey(key)) {
            readableKey = formKeyDict[key];
        }
        return readableKey;
    }
}
